# -*- coding: utf-8 -*-
"""stock_market_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qdQ7NBSEKKZgsq3zmbH-iuGgMm2HDyM6
"""

import yfinance as yf
import datetime
import sys
import pandas as pd
import matplotlib.pyplot as plt



end_date = datetime.date.today()

# CHECKING THE DATE
def valid_date(dt_string):
    try:
        datetime.datetime.strptime(dt_string, "%Y-%m-%d")
        return True
    except:
        return False

stock_name = input("Which Stock you want to visit?: ")
start_date = input("What should be the starting date? (YYYY-MM-DD): ")
while valid_date(start_date) == False:
    start_date = input("Please input the date again(YYYY-MM-DD) or type 0 to exit: ")
    if start_date == "0":
        print("Session ended")
        sys.exit()

data = yf.download(stock_name, start=start_date, end=end_date)
if data.empty:
  print("Stock Name is incorrect")
  sys.exit()
else:
  print("Data downloaded successfully")

print(data)
data['Low'].plot(figsize=(17, 8), fontsize=18, title=f'{stock_name} Close Prices')
plt.xlabel("Date", fontsize=14)
plt.ylabel("Price (USD)", fontsize=14)
plt.grid()
plt.show()

data = yf.download(stock_name, start=start_date, end=end_date)
if data.empty:
    print("Stock name is incorrect")
    sys.exit()
else:
    print("Data downloaded successfully")
# data['Average Price'] = (data['High'] + data['Low']) / 2
# data['Average Price'].plot(figsize=(17, 8), fontsize=18, title=f'{stock_name} Average Daily Price (Open & Close)')
# plt.xlabel("Date", fontsize=14)
# plt.ylabel("Price (USD)", fontsize=14)
# plt.grid()
# plt.show()

# Add 30-day moving average
data['SMA_10'] = data['Close'].rolling(window=10).mean()

# Add 100-day moving average
data['SMA_30'] = data['Close'].rolling(window=30).mean()

# Add 200-day moving average
data['SMA_50'] = data['Close'].rolling(window=50).mean()


data['SMA_20'] = data['Close'].rolling(window=20).mean()



# Display the data with new features
# print(data[['Close', 'SMA_10', 'SMA_30', 'SMA_50']].tail())
# print(data)

data['EMA_10'] = data['Close'].ewm(span=10, adjust=False).mean()
data['EMA_30'] = data['Close'].ewm(span=30, adjust=False).mean()
data['EMA_50'] = data['Close'].ewm(span=50, adjust=False).mean()
data = data.dropna()

data['Price Change'] = data['Close'].diff()
data['Gain'] = data['Price Change'].where(data['Price Change'] > 0, 0)
data['Loss'] = -data['Price Change'].where(data['Price Change'] < 0, 0)
data['Avg Gain'] = data['Gain'].rolling(window=7).mean()
data['Avg Loss'] = data['Loss'].rolling(window=7).mean()
data['RS'] = data['Avg Gain'] / data['Avg Loss']
data['RSI'] = 100 - (100 / (1 + data['RS']))
print(data)

data['STD_20'] = data['Close'].rolling(window=20).std()

data['Upper_B'] = data['SMA_20'] + data['STD_20']*2
data['Middle_B'] = data['SMA_20']
data['Lower_B'] = data['SMA_20'] - data['STD_20']*2


print(data)