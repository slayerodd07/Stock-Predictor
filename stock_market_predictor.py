# -*- coding: utf-8 -*-
"""stock_market_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qdQ7NBSEKKZgsq3zmbH-iuGgMm2HDyM6
"""

import yfinance as yf
import datetime
import sys
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error



end_date = datetime.date.today()

# CHECKING THE DATE
def valid_date(dt_string):
    try:
        datetime.datetime.strptime(dt_string, "%Y-%m-%d")
        return True
    except:
        return False

stock_name = input("Which Stock you want to visit?: ")
start_date = input("What should be the starting date? (YYYY-MM-DD): ")
while valid_date(start_date) == False:
    start_date = input("Please input the date again(YYYY-MM-DD) or type 0 to exit: ")
    if start_date == "0":
        print("Session ended")
        sys.exit()

data = yf.download(stock_name, start=start_date, end=end_date)
if data.empty:
  print("Stock Name is incorrect")
  sys.exit()
else:
  print("Data downloaded successfully")

print(data)
data['Low'].plot(figsize=(17, 8), fontsize=18, title=f'{stock_name} Close Prices')
plt.xlabel("Date", fontsize=14)
plt.ylabel("Price (USD)", fontsize=14)
plt.grid()
plt.show()

data = yf.download(stock_name, start=start_date, end=end_date)
if data.empty:
    print("Stock name is incorrect")
    sys.exit()
else:
    print("Data downloaded successfully")
# data['Average Price'] = (data['High'] + data['Low']) / 2
# data['Average Price'].plot(figsize=(17, 8), fontsize=18, title=f'{stock_name} Average Daily Price (Open & Close)')
# plt.xlabel("Date", fontsize=14)
# plt.ylabel("Price (USD)", fontsize=14)
# plt.grid()
# plt.show()

# Add 30-day moving average
data['SMA_10'] = data['Close'].rolling(window=10).mean()

# Add 100-day moving average
data['SMA_30'] = data['Close'].rolling(window=30).mean()

# Add 200-day moving average
data['SMA_50'] = data['Close'].rolling(window=50).mean()


data['SMA_20'] = data['Close'].rolling(window=20).mean()



# Display the data with new features
# print(data[['Close', 'SMA_10', 'SMA_30', 'SMA_50']].tail())
# print(data)

data['EMA_10'] = data['Close'].ewm(span=10, adjust=False).mean()
data['EMA_30'] = data['Close'].ewm(span=30, adjust=False).mean()
data['EMA_50'] = data['Close'].ewm(span=50, adjust=False).mean()
data = data.dropna()

data['Price Change'] = data['Close'].diff()
data['Gain'] = data['Price Change'].where(data['Price Change'] > 0, 0)
data['Loss'] = -data['Price Change'].where(data['Price Change'] < 0, 0)
data['Avg Gain'] = data['Gain'].rolling(window=7).mean()
data['Avg Loss'] = data['Loss'].rolling(window=7).mean()
data['RS'] = data['Avg Gain'] / data['Avg Loss']
data['RSI'] = 100 - (100 / (1 + data['RS']))
print(data)

data['STD_20'] = data['Close'].rolling(window=20).std()

data['Upper_B'] = data['SMA_20'] + data['STD_20']*2
data['Middle_B'] = data['SMA_20']
data['Lower_B'] = data['SMA_20'] - data['STD_20']*2


print(data)

# Use just the Close price for prediction
df = data[['Close']].copy()

# Create a target column by shifting Close price up by 1 day
df['Target'] = df['Close'].shift(-1)

# Drop the last row (NaN target)
df.dropna(inplace=True)

# Features (X) and Target (y)
X = df[['Close']]  # today's price
y = df['Target']   # tomorrow's price

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluation
mse = mean_squared_error(y_test, predictions)
print(f"\nModel Mean Squared Error: {mse:.4f}")

# Compare actual vs predicted
comparison = pd.DataFrame({'Actual': y_test, 'Predicted': predictions}, index=y_test.index)
print(comparison.tail())

# Predict next day
latest_price = df[['Close']].iloc[-1].values.reshape(1, -1)
next_day_prediction = model.predict(latest_price)
print(f"\nPredicted Close Price for the Next Day: ${next_day_prediction[0]:.2f}")
